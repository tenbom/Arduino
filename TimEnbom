/*
Changelog...
  4/25
  Turned servoInfo into a struct, now all the servo speed/timings/exc are held in servo1 and servo2
  4/28
  Moved all of the delays into loop(), easier to keep track of timings for the faster motors.
  Rewrote motor functions (mdLeft, mdRight, mdForward), added an (int mdFull) as the full motor power
  5/5
  Fixed motor code to match Ricardo's.
  Added a staggered loop, it'll check for a turn every 20ms, it'll check for corrections every 60ms.
  Added a sensorPin array, to make it easier to update a specific sensor.
//FUNCTIONALITY
  MOTOR SHIELD
  STARTING UP... from 0->200 power, gives decently more to the right motor.
  CONSTANT LOWER POWERS.. give more power to the left motor 8%~
  CONSTANT HIGHER POWERS.. even.

  Last Speeds... if there is a big gap 15%~ from 0 to over full
//TODO
  //if just sens[3] then sens[3] and sens[2] straighten out.
  //turns should end when they find the new line.
  
*/
//from front of sensor
//220 ohm resistor is signal, ground, 5v
//3/24/2016 EDIT
//Make sure the ground all goes to the same place
#include <Servo.h>
#include "DualVNH5019MotorShield.h"
DualVNH5019MotorShield md;
Servo myServo1;
Servo myServo2;
//Pins for the sensors========================================================================================
/*
#define Pin2 22 //left side
#define Pin3 24
#define Pin4 26
#define Pin5 28
#define Pin6 30 // right side
*/
//========================================GLOBAL DEFINES======================================================
int sensPins[5] = {22,24,26,28,30};
bool sensor[5] = {false, false, false, false, false}; //an array holding the 5 sensors' states.

struct ServoInfo{
  int pinNum;
  int turnSpeed;
  int turnTime;
  int stopSpeed;
};

ServoInfo servo1 = {32, 52, 1376, 95};
ServoInfo servo2 = {34, 52, 1376, 92};

int path[9] = {1, 0, 1, 1, 2, 2, 1, 1};  //0 = straight, 1 = left, 2 = right
int pathState, loopCounter, facing = 0;     //the current stage of the path; a counter for the main loop; a rough direction the robot is facing.
int mdFull = 300; //full power for the motor
int flipLeftMotor = 1;
int flipRightMotor = -1;
float rightMotorOffset = .915;//.8233; //left motor is naturally faster .78~ for low values

//SETUP=======================================================================================================
void setup() {
  Serial.begin(9600);
  md.init();
  myServo1.attach(servo1.pinNum);
  myServo2.attach(servo2.pinNum);
  myServo1.write(servo1.stopSpeed);
  myServo2.write(servo2.stopSpeed);
  //do not start the loop() code untill the robot until placed on a line, helps with debugging pathState
  while(1){
    readSensor(3);
    readSensor(1);
    if(!sensor[3] and !sensor[1]){
      readSensor(2);
      if(sensor[2]){
        Serial.println("out of setup");
        break;
      }
    }
    delay(1000);
  }
  //testForward();
}

//MAIN LOOP===================================================================================================
//checks the turn sensor (4 if the next turn is right, 0 if the next turn is left) every 33ms.
//checks for on-line corrections every 100ms
void loop() {
  //readSensors();
  //printSensors();
  
  loopCounter++;
  if(isTurn()){
    Serial.print("isTurn:true:");
    Serial.print(path[pathState]);
    mdPathState();  //get the motors going in the correct direction (left, right or forward)

    if(path[pathState]==0){ //if forward
      delay(450); //go forward for 450ms
    }
    else{ //left or right
      delay(1000); // turn for 1000ms
      facing=0;
    }
    
    loopCounter=3; // must straighten out.  So go to mdCorrectForward right away.
    pathState++;  
    if(pathState>9){ //done with path
      Serial.print("PATHSTATEW OVER 9");
      delay(50000);
    }
    Serial.println(":FinishedTurn");
  }
  //every 3 loops, check if you need forward corrections
  if(loopCounter==3){
    loopCounter=0;
    mdCorrectForward();
  }
  delay(33);
}
//checks the one sensor that would signal for the next turn (either sensor 4 or sensor 0)
bool isTurn(){
  if(path[pathState]==2){
    //right turn is next, so check sensor[0]
    readSensor(4);
    if(sensor[4]){
      //if it is pinging, double check it and the other turn sensors.
      for(int i =0;i<2;i++){
        readSensor(2);
        if(!sensor[2]) return false;
        mdForward(-.05);
        readSensor(3);
        if(!sensor[3]) return false;
        readSensor(4);
        if(!sensor[4]) return false;
      }
    }
    else return false;
  }
  else{
    //next turn is left or straight.
    readSensor(0);
    if(sensor[0]){
      for(int i =0;i<2;i++){
        readSensor(2);
        if(!sensor[2]) return false;
        mdForward(-.05);
        readSensor(1);
        if(!sensor[1]) return false;
        readSensor(0);
        if(!sensor[0]) return false;
      }
    }
    else return false;
  }
  return true;
}

void mdPathState(){
    //starts the motor on the next pathState
    if(path[pathState]==1){ //next turn is a left
        mdLeft(-.05);
    }
    else if(path[pathState]==2){ //next turn is a right
        mdRight(-.05);
    }
    else{ //skip this turn
        mdForward(1);
    }
}

void mdCorrectForward(){
  //there is no turn so just correct to stay on the line.
  readSensor(1);
  readSensor(2);
  readSensor(3);
  //slight left
  if(sensor[1]){
    Serial.println("Correct Left");
    if(sensor[2]){ //sensor[2] and sensor[1]
      mdLeft(.3);
    }
    else{         //sensor[1]
      mdLeft(-.05);
    }
  }
  //slight right
  else if(sensor[3]){
    Serial.println("Correct Right");
    if(sensor[2]){ //sensor[2] and sensor[3]
      mdRight(.3);
    }
    else{          //sensor[3]
      mdRight(-.05);
    }
  }
  //only sensor[2] is active
  else if(sensor[2]){
    mdForward(1);
  }
  //are any sensors reading?
  else{
    readSensor(0);
    readSensor(4);
    //far off the line.  FIX NEEDED.  It must go backwards and re-find the line at this point.  So as to not miss a turn.
    if(sensor[0]){
      mdLeft(.1);
    }
    else if(sensor[4]){
      mdRight(.1);
    }
    //no sensors reading
    else{
      //stop
      mdForward(-.05);
    }
  }
}

void printSensors(){
  for(int i=0;i<5;i++){
    Serial.print(sensor[i]);
  }
  Serial.println("");
}
void readSensor(int num){
    sensor[num] = sensorState(sensPins[num]);
}
//read everything
void readSensors(){
  for(int i=0;i<5;i++){
    sensor[i] = sensorState(sensPins[i]);
  }
}

bool sensorState(int sensorIn){       //
   pinMode(sensorIn, OUTPUT);     // Make pin OUTPUT
   digitalWrite(sensorIn, HIGH);  // Pin HIGH (discharge capacitor)
   pinMode(sensorIn, INPUT);      // Make pin INPUT
   digitalWrite(sensorIn, LOW);   // Turn off internal pullups
   if(digitalRead(sensorIn)){     // Pin goes HIGH which means it is on the black line
      return true;
   }
   else{
    return false;
   }
}

//MOTOR FUNCTIONS=============================================================================================
//v signals how much power should go to the Right or Left engine.  Usually set to (-.05)->(.7) starting a turn or mild correction.
void mdRight(float v) {
    md.setM1Speed(flipLeftMotor*mdFull*v);
    md.setM2Speed(flipRightMotor*(mdFull*rightMotorOffset));
}
void mdLeft(float v) {
    md.setM1Speed(flipLeftMotor*mdFull);
    md.setM2Speed(flipRightMotor*(mdFull*rightMotorOffset)*v);
}
void mdForward(float v) {
    md.setM1Speed(flipLeftMotor*mdFull*v);
    md.setM2Speed(flipRightMotor*(mdFull*rightMotorOffset)*v);
}

//END OF MOTOR FUNCTIONS===============================================================

void testTurn(){
  while(1){
    mdLeft(.7);
    delay(100);
    mdRight(.7);
    delay(200);
    mdLeft(.7);
    delay(100);
  }
}
void testSensors(){
  while(1){
    loopCounter++;
    isTurn();
    if(loopCounter<40){
      mdForward(1);
    }
    else if(loopCounter<45){
      mdLeft(.95);
    }
    else{
      loopCounter=0;
    }
    delay(100);
  }
}
void testForward(){
  while(1){
    mdForward(1.0);
    delay(800);
    mdForward(-.05);
    delay(100);
    mdForward(.7);
    delay(900);
    mdForward(.45);
    delay(1000);
    mdForward(-.05);
    delay(100);
  }
}

void testTrack(){
   mdForward(.5);
  while(1){
    readSensors();
    printSensors();
    if(sensor[3] or sensor[1]){
      mdForward(-.05);
      delay(100);
      mdForward(.5);
    }
    delay(500);
  }
}
